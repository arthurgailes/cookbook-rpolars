# Import/Export

```{r}
#| label: load-packages-import-export
#| code-fold: true
#| message: false
#| warning: false
#| results: 'hide'
library(polars)
```

## Import data

### Read a csv file or URL

The `read_csv()` method can be used to import a csv file from a file or an URL.
`read_csv()` returns a `DataFrame`. 

#### From a file:

::: {.panel-tabset} 

## polars

```{r}
#| label: read_csv-from-file-polars
pl$read_csv("examples/iris.csv")
```

## R base

```{r}
#| label: read-csv-rbase
read.csv("examples/iris.csv")
```
:::

#### From multiple files

First, let's create a dozen csv files

```{r}
#| label: creation-ten-csv-files
#| message: false
#| warning: false
dir.create("Datasets")
mydf <- data.frame(
  col1 = 1:3,
  col2 = c("a", "b", "c")
)
for (i in 1:10) {
  write.csv(mydf, file = paste0("Datasets/example_data_",i,".csv"))
}
```

::: callout-important
May 2023: Reading those multiple files into a single `DataFrame` is not yet implemented in R. See [here](https://pola-rs.github.io/polars-book/user-guide/io/multiple/#reading-into-a-single-dataframe) for an example in Python.
:::


#### From an URL

The `read_csv()` method also works with an URL:

```{r}
#| label: read_csv-from-URL-polars
pl$read_csv("https://j.mp/iriscsv")
```

If you want to use this method in [lazy mode](#lazy-executioin), it accepts a lazy boolean argument (FALSE by default but in this case, we prefer to use the `lazy_csv_reader()` method below.

```{r}
#| label: read_csv-from-file-lazy-polars
pl$read_csv("examples/iris.csv", lazy = TRUE)
```

ðŸ‘‰ For a complete list of arguments to use with the `read_csv()` method, see [this page](https://pola-rs.github.io/polars/py-polars/html/reference/api/polars.read_csv.html#polars.read_csv).


### Scan a csv file

The `lazy_csv_reader()` method can be used to lazily read a csv file from a file.  
`lazy_csv_reader()` returns a `LazyFrame`. 

> This allows the query optimizer to push down predicates and projections to the scan level, thereby potentially reducing memory overhead.

```{r}
#| label: lazy_csv-from-file-polars
pl$lazy_csv_reader("examples/iris.csv")$ # lazy, don't do a thing
  select(
    pl$col(c("Petal.Length","Petal.Width")) # select only 2 columns
  )$
  filter(
    pl$col("Petal.Length") > 4 # the filter is pushed down the scan, so less data is read into memory
    )$collect() # <- don't forget collect() here!
```

ðŸ‘‰ For a complete list of arguments to use with the `lazy_csv_reader()` method, see [this page](https://rpolars.github.io/reference/lazy_csv_reader/).

::: callout-important
May 2023: arguments available in Python `eol_char` and `with_column_names` not yet supporting in R
:::


### Scan a parquet file

The `scan_parquet()` method can be used to lazily read a parquet file from a file.  
Scanning delays the actual parsing of the file and `scan_parquet()` returns a `LazyFrame`. 

```{r}
#| label: scan-parquet-polars
scan_parquet("examples/iris.parquet")
```

ðŸ‘‰ For a complete list of arguments to use with the `scan_parquet()` method, see [this page](https://rpolars.github.io/reference/scan_parquet/).

At the end of the query, don't forget to use the `collect()` method to inform Polars that you want to execute it.

::: callout-caution
May 2023 : Export methods have not yet been implemented in R. This methods start with `write_` (write_parquet(), write_parquet(), write_json(), write_ndjson()...)
:::


