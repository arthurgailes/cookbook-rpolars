# First steps with Polars and R

First of all we need to install all the packages and create an big random dataset needed for this book to work, so don't bother with the following code:

```{r}
#| label: necessary-settings
#| code-fold: true
#| message: false
#| warning: false
#| results: 'hide'

# Installation of packages for cookbook-rpolars
packages <- c('dplyr','data.table','arrow','fakir','tictoc')
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
  install.packages(packages[!installed_packages], dependencies = TRUE)
}

# Loading packages
invisible(lapply(packages, library, character.only = TRUE))

# Creation of iris_dt
iris_dt <- as.data.table(iris)
```

## Installation

Until the R polars package is uploaded to CRAN, [the polars package development team](https://github.com/pola-rs/r-polars/graphs/contributors) offers [several solutions](https://rpolars.github.io/#install) for installation.

The most practical one in my opinion at the moment is to use [R-universe](https://r-universe.dev/search/) and install like this: 

``` {r}
#| label: installation
#| message: false
#| warning: false
#| results: 'hide'

# Install packages not yet installed
packages <- c("polars")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
  install.packages(packages[!installed_packages], repos = "https://rpolars.r-universe.dev")
}
library(polars)
```

## First glimpse

Polars' main functions are stored in the "pl" namespace and can be accessed using the "pl$" prefix to prevent conflicts with other packages and base R function names. For more, see [here](https://rpolars.github.io/reference/pl_pl/#examples).

First example to convert the most famous R data frame ([iris](https://archive.ics.uci.edu/ml/datasets/iris)) to a Polars DataFrame:

```{r}
#| label: iris-conversion
iris_polars <- pl$DataFrame(iris)
iris_polars
```

For example, **to count the number of lines** of the iris data frame :  

::: {.panel-tabset}
## polars

```{r}
#| label: height-function
# With pl$ prefix
pl$DataFrame(iris)$height
# Using iris_polars
iris_polars$height
```

## R base

```{r}
#| label: nrow-function
nrow(iris)
```

:::

**To select the first 5 iris rows and the Petal.Length and Species columns**, syntax is identical between Polars and R base:

::: {.panel-tabset}
## polars

```{r}
#| label: first-extract-polars
iris_polars[1:5, c("Petal.Length", "Species")]
```

## R base

```{r}
#| label: first-extract-rbase
iris[1:5, c("Petal.Length", "Species")]
```

## dplyr

```{r}
#| label: first-extract-dplyr
iris |> 
  slice(1:5) |> 
  select(Petal.Length,Species)
```

## data.table

```{r}
#| label: first-extract-datatable
iris_dt[1:5, .(Petal.Length, Species)]
```

:::

## Data Structures

> The core base data structures provided by Polars are Series and DataFrames. 

### Series and vectors

::: {.callout-important}
`Series` are a **1-dimensional** data structure. Within a series all elements have the same Data Type. 
:::

In Polars objects, `Series` object are like R `vectors`.  
To create a Polars Series from scratch:

::: {.panel-tabset}
## polars

```{r}
#| label: series-polars
mynumbers_serie <- pl$Series(1:3)
myletters_serie <- pl$Series(c("a","b","c"))
```

## R base

```{r}
#| label: vectors-rbase
mynumbers_vector <- 1:3
myletters_vector <- c("a","b","c")
```

:::

### DataFrame and data.frame

::: {.callout-note}
A `DataFrame` is a **2-dimensional** data structure that is backed by a `Series`, and it can be seen as an abstraction of a collection (e.g. list) of Series. 
:::

In polars objects, `DataFrame` object are like R `data.frame` and close to a `tibble` and a `data.table` object.  
To create a Polars DataFrame from scratch:

::: {.panel-tabset}
## polars

```{r}
#| label: dataframe-polars
# Creation of a DataFrame object with Series
mydf <- pl$DataFrame(
  col1 = mynumbers_serie,
  col2 = myletters_serie
)
# Creation of a DataFrame object with Series and vectors
pl$DataFrame(
  col1 = mynumbers_serie,
  col2 = myletters_vector
)
```

## R base

```{r}
#| label: dataframe-rbase
data.frame(
  col1 = mynumbers_vector,
  col2 = myletters_vector
)
```

## dplyr

```{r}
#| label: tibble-dplyr
tibble(
  col1 = mynumbers_vector,
  col2 = myletters_vector
)
```

## data.table

```{r}
#| label: tibble-datatable
data.table(
  col1 = mynumbers_vector,
  col2 = myletters_vector
)
```

:::

## Manipulation of Series and DataFrames with R standard functions

`Series` and `DataFrames` can be manipulated **with a lot of standard R functions**.  
Some examples with `Series`:

```{r}
#| label: series-manipulation-standard
sum(mynumbers_serie)
paste(myletters_serie,collapse = "")
```

Some examples with `DataFrames`:

```{r}
#| label: dataframe-manipulation-standard
names(mydf)
ncol(mydf)
```

## Expressions

Here I'm quoting what Damian Skrzypiec said [in his blog](https://dskrzypiec.dev/polars/) about Polars expressions:

> One of fundamental building blocks in Polars are Polars expressions. In general Polars expression is any function that transforms Polars series into another Polars series. There are few advantageous aspects of Polars expressions. Firstly expressions are optimized. Particularly if expression need to be executed on multiple columns, then it will be parallelized. Itâ€™s one of reasons behind Polars high performance. Another aspect is the fact the Polars implements an extensive set of builtin expressions that user can compose (chain) into more complex expressions.

This is what an Polars expression looks like:

```{r}
#| label: first-polars-expression
#| eval: false
pl$col("Petal.Length")$round(decimals = 0)$alias("Petal.Length.rounded")
```

Which means that:
- Select column "Petal.Length"
- Then round the column with 0 decimals
- Then rename the column "Petal.Length.rounded"

::: {.callout-tip}
Every expression produces a new expression, and that they can be piped together.
:::

For example:

```{r}
#| label: second-polars-expression
#| eval: false
pl$col("bar")$filter(pl.col("foo") == 1)$sum()
```

To learn more about Polars expressions, see [the official documentation](https://pola-rs.github.io/polars-book/user-guide/concepts/expressions/).

------------------

**If you have read this far and managed to reproduce the examples, congratulations! You are ready to dive into the deep end of Polars with R in the next parts of this cookbook!** ðŸš€
