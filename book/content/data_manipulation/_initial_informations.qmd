## Some initial informations on a DataFrame

### First overview of a DataFrame

Here is a list of instructions that I frequently use to quickly get information about a `DataFrame`.

```{r}
#| label: informations-methods
# To get the schema (= a named list)
mydf$schema
# To get column types as strings. 
mydf$dtype_strings()
# To get an estimation of the total allocated size (in Bytes)
mydf$estimated_size()
# To get the first n rows
mydf$head(2)
# To get the dimensions
mydf$shape
# To get the number of rows
nrow.DataFrame(mydf)
# To get the number of columns
ncol.DataFrame(mydf)
# or
mydf$height
```

::: {.callout-caution title="Work in Progress"}
Polars API contains useful methods for quickly describing a `DataFrame` - [describe](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/api/polars.DataFrame.describe.html) and [glimpse](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/api/polars.DataFrame.glimpse.html#) that has not yet been implemented (June 2023).
:::

### Count values in a DataFrame

The `value_counts()` method can be used to count values in a Series of a DataFrame. 
`value_counts()` works with a `Series`. It must therefore be supplied either with square brackets or with the `select()` method. See [here](#select-columns) to learn about it.

::: {.panel-tabset}
## polars

```{r}
#| label: value-count-polars

# 1st option with square brackets
pl$DataFrame(iris)[,c("Species")]$value_counts()
# 2nd option with select() method
pl$DataFrame(iris)$select(pl$col("Species"))$to_series()$value_counts()
```

## R base

```{r}
#| label: value-count-rbase
table(iris$Species)
```

## dplyr

```{r}
#| label: value-count-dplyr
iris |>
  count(Species)
```

## data.table

```{r}
#| label: value-count-datatable
iris_dt[, .N, by = Species]
```
:::


### Count NA over columns in a DataFrame

The `null_count()` method can be used to count NA values of a DataFrame.

::: {.panel-tabset}
## polars

```{r}
#| label: null-count-polars
mydfNA <- pl$DataFrame(
  colA = pl$Series(c("a",NA,"c")),
  colB = pl$Series(c("d",NA,NA)))
mydfNA$null_count()
```

## R base

```{r}
#| label: sapply-NA-rbase
mydfNA <- data.frame(
  colA = c("a",NA,"c"),
  colB = c("d",NA,NA))
sapply(mydfNA, function(x) sum(is.na(x)))
```

## dplyr

```{r}
#| label: count-NA-dplyr
mydfNA |>
  summarise(across(everything(), ~sum(is.na(.))))
```

## data.table

```{r}
#| label: count-NA-datatable
mydfNA_dt <- as.data.table(mydfNA)
mydfNA_dt[, lapply(.SD, function(x) sum(is.na(x))), .SDcols = names(mydfNA_dt)]
```
:::
