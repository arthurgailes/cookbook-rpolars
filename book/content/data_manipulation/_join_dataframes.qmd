## Join DataFrames

To perform joins, the `join()` method must be used.  

Multiple strategies are available:  

- `"inner"`: returns row with matching keys in both frames. Non-matching rows in either the left or right frame are discarded.  
- `"left"`: returns all rows in the left dataframe, whether or not a match in the right-frame is found. Non-matching rows have their right columns null-filled.  
- `"outer"`: returns all rows from both the left and right dataframe. If no match is found in one frame, columns from the other frame are null-filled.  
- `"semi"`: returns all rows from the left frame in which the join key is also present in the right frame.  
- `"anti"`: returns all rows from the left frame in which the join key is not present in the right frame.  
- `"cross"`: returns the cartesian product of all rows from the left frame with all rows from the right frame. Duplicates rows are retained. The table length of A cross-joined with B is always len(A) Ã— len(B).  

The main arguments are: 
- `on`: name(s) of the join columns in both DataFrames.  
- `how`: join strategy.  
- `suffix`: suffix to append to columns with a duplicate name.  

Let's see a simple example:  

::: {.panel-tabset}
## polars

```{r}
#| label: join-polars
# First, creation of colors_species Polars DataFrame
colors <- pl$DataFrame(
  Surname = pl$Series(c("toto","titi","tata")),
  Color = pl$Series(c("blue","red","yellow"))
)
values <- pl$DataFrame(
  Surname = pl$Series(c("toto","titi","tata")),
  value = pl$Series(c(10,20,30))
)
# Let's join !
colors$join(
  other = values,
  on = "Surname",
  how = "left"
)
```

## R base

```{r}
#| label: merge-rbase
colors <- data.frame(
  Surname = c("toto","titi","tata"),
  Color = c("blue","red","yellow")
)
values <- data.frame(
  Surname = c("toto","titi","tata"),
  value = c(10,20,30)
)
merge(colors, values, by = "Surname", all.x = TRUE)
```

## dplyr

```{r}
#| label: join-dplyr
colors |>
  left_join(values,
            by = "Surname") 
```

## data.table

```{r}
#| label: join-datatable
merge(as.data.table(colors), 
      as.data.table(values), 
      by = "Surname", all.x = TRUE)
```
:::
