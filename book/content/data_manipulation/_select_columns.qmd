## Select columns

### Selecting by name

The first option for selecting columns of a DataFrame is to use square brackets `[]`.  
The second option is to use the `select()` method. In this case, it must be used with the `col()` method which allows to designate the columns to be selected.

::: {.panel-tabset}
## polars

```{r}
#| label: select-polars

# 1st option : with square brackets syntax
pl$DataFrame(iris)[1:3,c("Petal.Length","Petal.Width")] 
# 2nd option : with select() method
pl$DataFrame(iris)$select(
  pl$col(c("Petal.Length","Petal.Width"))
)$head(3) # display the first 3 lines
```

## R base

```{r}
#| label: select-rbase
iris[1:3,c("Petal.Length","Petal.Width")] 
```

## dplyr

```{r}
#| label: select-dplyr
iris |>
  select(Petal.Length,Petal.Width) |>
  head(3)
```

## data.table

```{r}
#| label: select-datatable
iris_dt[1:3,.(Petal.Length,Petal.Width)]
```
:::

Keep in mind that when **selecting only one column** from a `DataFrame` the output is a `Series` whereas **if there is more than one column**, the output is a `DataFrame`.


::: {.callout-note}
With Polars if you want to obtain a result in an R data.frame, you can simply add the method `to_data_frame()` at the end of the method chaining.
:::


### Selecting by data type

To select columns by data type from a DataFrame, you can pass a data type to `pl$col` expression.
For example:

::: {.panel-tabset}
## polars

```{r}
#| label: select-datatype-polars

# Select only categorical columns
pl$DataFrame(iris)$select(pl$col(pl$Categorical))$head(3) 
# Select only Float64 columns
pl$DataFrame(iris)$select(pl$col(pl$Float64))$head(3)
```

## R base

```{r}
#| label: select-datatype-rbase

# Select only factor columns
as.data.frame(iris[1:3, sapply(iris, is.factor)])
# Select only numeric columns
iris[1:3, sapply(iris, is.numeric)]
```

## dplyr

```{r}
#| label: select-datatype-dplyr

# Select only factor columns
iris %>% 
  select_if(is.factor)
# Select only numeric columns
iris %>% 
  select_if(is.numeric)
```

## data.table

```{r}
#| label: select-datatype-datatable

# Select only factor columns
iris_dt[, .SD, .SDcols = is.factor]
# Select only numeric columns
iris_dt[, .SD, .SDcols = is.numeric]
```
:::

::: {.callout-note}
You can also select columns from a DataFrame using a name pattern. See [an example by removing a column](#removing-by-name-pattern)
:::

### Selecting using lists

It is also possible to select columns using `R lists` which can be very practical depending on the case. Here's an example:

```{r}
#| label: select-lists-polars
data(iris)

l_expr = list(
  pl$col("Petal.Length"),
  pl$col("Species")
)

# Select only categorical columns
pl$DataFrame(iris)$select(l_expr)$head(3) 
```
This way of selecting columns also works with simple R lists:

```{r}
#| label: select-simple-lists-polars
data(iris)

l_expr = list(
  "Petal.Length",
  "Species",
  "Petal.Width"
)

# Select only categorical columns
pl$DataFrame(iris)$select(l_expr)$head(3) 
```


