Below is the code used to create the fake data needed to compare the `eager` and `lazy` modes in this document.  
Click to expand it! ðŸ‘‡

```{r}
#| label: load-packages-benchmarking
#| code-fold: true
#| message: false
#| warning: false
#| results: 'hide'
library(polars)
library(arrow)
library(dplyr)
library(data.table)
library(bench)

# Creation the "Datasets" folder
dir.create(normalizePath("Datasets"))

set.seed(123)

# Creation of large example R data.frame
DataMultiTypes <- data.frame(
  colDate1 = as.POSIXct(sample(as.POSIXct("2023-01-01"):as.POSIXct("2023-06-30"),2000000),origin="1970-01-01"),
  colDate2 = as.POSIXct(sample(as.POSIXct("2023-07-01"):as.POSIXct("2023-12-31"),2000000),origin="1970-01-01"),
  colInt = sample(1:10000, 2000000, replace = TRUE), 
  colNum = runif(2000000), 
  colString = sample(c("A", "B", "C"), 2000000, replace = TRUE), 
  colFactor = factor(sample(c("Low", "Medium", "High"), 2000000, replace = TRUE))
)

# Creation of large csv file
write.csv(x = DataMultiTypes,
          file = "Datasets/DataMultiTypes.csv",
          row.names=FALSE)

# Creation of unique parquet file
arrow::write_parquet(x = DataMultiTypes,
                     sink = "Datasets/DataMultiTypes.parquet")
# Creation of 6 parquet file
arrow::write_dataset(dataset = DataMultiTypes,
                     path = "Datasets/DataMultiTypes",
                     format = c("parquet"),
                     partitioning = c("colFactor"))
# Creation of duckdb file
con <- dbConnect(duckdb::duckdb(),
                 "Datasets/DataMultiTypes.duckdb")
duckdb::dbWriteTable(con,
                     "DataMultiTypes",
                     DataMultiTypes,
                     overwrite = TRUE)
dbDisconnect(con)
```