## From an unique parquet file


For this comparison on **unique parquet file**, we will use :

- For **arrow (eager)**, the `arrow::read_parquet()` method
- For **arrow (lazy)**, the `arrow::open_dataset()` method
- For **Duckdb and SQL**, the `arrow::read_parquet()` and `DBI::dbGetQuery()` methods
- For **polars (lazy)**, the `polars::scan_parquet` method

::: {.callout-note}
With arrow, you can use the [following verbs from the tidyverse](https://arrow.apache.org/docs/dev/r/reference/acero.html) to do transformations on your tables.
:::

::: {.panel-tabset}

## arrow (eager)

```{r}
#| label: unique-parquet-arrow-eager-benchmarking

arrow_eager <- function(variables) {
  
  result <- arrow::read_parquet("Datasets/DataMultiTypes.parquet") |>
    
    mutate(
      # Conversion of 2 columns to Date format
      colDate1 = as.Date(colDate1),
      colDate2 = as.Date(colDate2)
    ) |>
    # Filter rows
    filter(
      colInt>2000 & colInt<8000
    ) |>
    # Grouping and aggregation
    group_by(colString) |> 
    summarise(
      min_colInt = min(colInt),
      mean_colInt = mean(colInt),
      mas_colInt = max(colInt),
      min_colNum = min(colNum),
      mean_colNum = mean(colNum),
      max_colNum = max(colNum)
  )
  
  return(result)
  
}
tic()
arrow_eager()
toc()
```

## arrow (lazy)

```{r}
#| label: unique-parquet-arrow-lazy-benchmarking

arrow_lazy <- function(variables) {
  
  result <- arrow::open_dataset("Datasets/DataMultiTypes.parquet") |>
    
    mutate(
      # Conversion of 2 columns to Date format
      colDate1 = as.Date(colDate1),
      colDate2 = as.Date(colDate2)
    ) |>
    # Filter rows
    filter(
      colInt>2000 & colInt<8000
    ) |>
    # Grouping and aggregation
    group_by(colString) |> 
    summarise(
      min_colInt = min(colInt),
      mean_colInt = mean(colInt),
      mas_colInt = max(colInt),
      min_colNum = min(colNum),
      mean_colNum = mean(colNum),
      max_colNum = max(colNum)
  )
  
  return(result)
  
}
tic()
arrow_lazy() |> collect()
toc()
```

## Duckdb and SQL

```{r}
#| label: unique-parquet-duckdb-benchmarking

parquet_duckdb_sql <- function(variables) {
  
  con <- dbConnect(duckdb::duckdb())
  
  result <- dbGetQuery(
    con, 
    "SELECT colString,
           MIN(colInt) AS min_colInt,
           AVG(colInt) AS mean_colInt,
           MAX(colInt) AS max_colInt,
           MIN(colNum) AS min_colNum,
           AVG(colNum) AS mean_colNum,
           MAX(colNum) AS max_colNum
    FROM (
        SELECT colString,
               colInt,
               colNum
        FROM read_parquet('Datasets/DataMultiTypes.parquet')
        WHERE colInt > 2000 AND colInt < 8000
) AS filtered_data
GROUP BY colString;")
  
  dbDisconnect(con, shutdown=TRUE)
  
  return(result)
}
tic()
parquet_duckdb_sql()
toc()
```

## polars (lazy)

```{r}
#| label: unique-parquet-polars-lazy-benchmarking

parquet_polars_lazy <- function(variables) {
  
  result <- polars::scan_parquet(file = "Datasets/DataMultiTypes.parquet")$
    # Conversion of 2 columns to Date format
    with_columns(
      pl$col("colDate1")$str$strptime(pl$Date, "%F %T", strict = FALSE),
      pl$col("colDate2")$str$strptime(pl$Date, "%F %T", strict = FALSE)
    )$
    # Filter rows
    filter(
      pl$col("colInt")>2000 & pl$col("colInt")<8000
    )$
    # Grouping and aggregation
    groupby(
      "colString")$
    agg(
      pl$col("colInt")$min()$alias("min_colInt"),
      pl$col("colInt")$mean()$alias("mean_colInt"),
      pl$col("colInt")$max()$alias("max_colInt"),
      pl$col("colNum")$min()$alias("min_colNum"),
      pl$col("colNum")$mean()$alias("mean_colNum"),
      pl$col("colNum")$max()$alias("max_colNum")
    )
  
  return(result)
}
tic()
parquet_polars_lazy()$collect()$to_data_frame()
toc()
```
:::

### Results for unique parquet file

```{r}
#| label: unique-parquet-results-benchmarking
#| message: false
#| warning: false

unique_parquet_bmk <- microbenchmark(
  "arrow (eager)" = arrow_eager(),
  "arrow (lazy)" = arrow_lazy() |> collect(),
  "Duckdb and SQL" = parquet_duckdb_sql(),
  "polars (lazy)" = parquet_polars_lazy()$collect()$to_data_frame(),
  times = 5
 )
```
 