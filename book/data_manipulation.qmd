# Data manipulation

```{r}
#| label: load-packages-data-manipulation
#| code-fold: true
#| message: false
#| warning: false
#| results: 'hide'
library(polars)
library(dplyr)
library(data.table)
library(arrow)
iris_dt <- as.data.table(iris)
```

## Series and vectors

In polars objects, `Series` object are like R `vectors`.

::: {.panel-tabset}
## polars

```{r}
#| label: series-polars
mynumbers_serie <- pl$Series(1:3)
myletters_serie <- pl$Series(c("a","b","c"))
```

## R base

```{r}
#| label: vectors-rbase
mynumbers_vector <- 1:3
myletters_vector <- c("a","b","c")
```

:::

## DataFrame and data.frame

In polars objects, `Series` object are like R `vectors` and close to a `tibble` and a `data.table` object.

::: {.panel-tabset}
## polars

```{r}
#| label: dataframe-polars
# Creation of a DataFrame object with Series
mydf <- pl$DataFrame(
  col1 = mynumbers_serie,
  col2 = myletters_serie
)
# Creation of a DataFrame object with Series and vectors
pl$DataFrame(
  col1 = mynumbers_serie,
  col2 = myletters_vector
)
```

## R base

```{r}
#| label: dataframe-rbase
data.frame(
  col1 = mynumbers_vector,
  col2 = myletters_vector
)
```

## dplyr

```{r}
#| label: tibble-dplyr
tibble(
  col1 = mynumbers_vector,
  col2 = myletters_vector
)
```

## data.table

```{r}
#| label: tibble-datatable
data.table(
  col1 = mynumbers_vector,
  col2 = myletters_vector
)
```

:::

## Manipulation of Series and DataFrames with R standard functions

Series and DataFrames can be manipulated with a lot of standard R functions.

```{r}
#| label: series-manipulation-standard
sum(mynumbers_serie)
paste(myletters_serie,collapse = "")
```

```{r}
#| label: dataframe-manipulation-standard
names(mydf)
ncol(mydf)
```

## Methods

The added value of Polars consists in the `methods`. Those powerful methods are accessed using the `$` operator.

```{r}
#| label: series-manipulation-method
mynumbers_serie$sum()
# To convert Polars Series to vector
myletters_serie$to_vector()
```

```{r}
#| label: dataframe-manipulation-method
mydf$columns
length(mydf$columns)
# To convert DataFrames to data.frames
mydf$to_data_frame()
```

Polars includes a very useful chaining method in data manipulation operations. From this point of view, Polars is more like dplyr and data.table.
This is how the chaining method is defined in the official documentation:

> In polars our method chaining syntax takes the form `object$m1()$m2()`, where object is our data `object`, and `m1()` and `m2()` are appropriate methods, like subsetting or aggregation expressions.

Let's see an example with the iris dataset:

::: {.panel-tabset}
## polars

```{r}
#| label: chaining-polars
pl$DataFrame(iris)$groupby(
  "Species")$median()  
```

## R base

```{r}
#| label: aggregate-rbase
aggregate(. ~ Species, iris, median)
```

## dplyr

```{r}
#| label: chaining-dplyr
iris |>
  group_by(Species) |>
  summarise(across(everything(),median))
```

## data.table

```{r}
#| label: chaining-datatable
iris_dt[, lapply(.SD, median), by = Species]
```

:::

::: {.callout-tip}
In the Polars code used above, you will notice thatwe have introduced line breaks. We could have written the whole code on the same line but for the sake of readability I prefer to separate the methods used by line breaks.
:::

## Common data manipulation methods

### Method filter

The `filter()` method is used to filter the rows of a DataFrame. It must be used with the `col()` method which allows to designate the columns on which the filter condition will be applied.

::: {.panel-tabset}
## polars

```{r}
#| label: filter-polars
pl$DataFrame(iris)$filter(
  pl$col("Petal.Length") > 6 & pl$col("Petal.Width") < 2)
```

## R base

```{r}
#| label: filter-rbase
iris[iris$Petal.Length > 6 & iris$Petal.Width < 2,] # here don't forget the comma
```

## dplyr

```{r}
#| label: filter-dplyr
iris |>
  filter(Petal.Length > 6 & Petal.Width < 2) 
```

## data.table

```{r}
#| label: filter-datatable
iris_dt[Petal.Length > 6 & Petal.Width < 2]
```

:::

### Method select

The `select()` method is used to filter the rows of a DataFrame. It must be used with the `col()` method which allows to designate the columns to be selected.

::: {.panel-tabset}
## polars

```{r}
#| label: select-polars
pl$DataFrame(iris)$select(
  pl$col(c("Petal.Length","Petal.Width"))
)$head(3) # display the first 3 lines
```

## R base

```{r}
#| label: select-rbase
iris[1:3,c("Petal.Length","Petal.Width")] 
```

## dplyr

```{r}
#| label: select-dplyr
iris |>
  select(Petal.Length,Petal.Width) |>
  head(3)
```

## data.table

```{r}
#| label: select-datatable
iris_dt[1:3,.(Petal.Length,Petal.Width)]
```

:::

::: {.callout-note}
If you want to obtain a result in an R data.frame, you can simply add the method `to_data_frame()` at the end of the method chaining.
:::
