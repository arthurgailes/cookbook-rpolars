# Data manipulation

## Series and vectors

In polars objects, `Series` object are like R `vectors`.

::: {.panel-tabset}
## polars

```{r}
#| label: series-polars
mynumbers_serie <- pl$Series(1:3)
myletters_serie <- pl$Series(c("a","b","c"))
```

## R base

```{r}
#| label: vectors-rbase
mynumbers_vector <- 1:3
myletters_vector <- c("a","b","c")
```

:::

## DataFrame and data.frame

In polars objects, `Series` object are like R `vectors` and close to a `tibble` and a `data.table` object.

::: {.panel-tabset}
## polars

```{r}
#| label: dataframe-polars
# Creation of a DataFrame object with Series
mydf <- pl$DataFrame(
  col1 = mynumbers_serie,
  col2 = myletters_serie
)
# Creation of a DataFrame object with Series and vectors
pl$DataFrame(
  col1 = mynumbers_serie,
  col2 = myletters_vector
)
```

## R base

```{r}
#| label: dataframe-rbase
data.frame(
  col1 = mynumbers_vector,
  col2 = myletters_vector
)
```

## dplyr

```{r}
#| label: tibble-dplyr
tibble(
  col1 = mynumbers_vector,
  col2 = myletters_vector
)
```

## data.table

```{r}
#| label: tibble-datatable
data.table(
  col1 = mynumbers_vector,
  col2 = myletters_vector
)
```

:::

## Manipulation of Series and DataFrames with R standard functions

Series and DataFrames can be manipulated with a lot of standard R functions.

```{r}
#| label: series-manipulation-standard
sum(mynumbers_serie)
paste(myletters_serie,collapse = "")
```

```{r}
#| label: dataframe-manipulation-standard
names(mydf)
ncol(mydf)
```

## Methods

The added value of Polars consists in the `methods`. Those powerful methods are accessed using the `$` operator.

```{r}
#| label: series-manipulation-standard
mynumbers_serie$sum()
# To convert Polars Series to vector
myletters_serie$to_vector()
```

```{r}
#| label: dataframe-manipulation-standard
mydf$columns
length(mydf$columns)
# To convert DataFrames to data.frames
mydf$to_data_frame()
```

Polars includes a very useful chaining method in data manipulation operations. From this point of view, Polars is more like dplyr and data.table.
This is how the chaining method is defined in the official documentation:

> In polars our method chaining syntax takes the form `object$m1()$m2()`, where object is our data `object`, and `m1()` and `m2()` are appropriate methods, like subsetting or aggregation expressions.

Let's see an example with the iris dataset:

::: {.panel-tabset}
## polars

```{r}
#| label: dataframe-polars
# Creation of a DataFrame object with Series
pl$DataFrame(iris)$
  groupby("Species")$
  median()  
```

## R base

```{r}
#| label: dataframe-rbase
aggregate(. ~ Species, iris, median)
```

## dplyr

```{r}
#| label: tibble-dplyr
iris |>
  group_by(Species) |>
  summarise(across(everything(),median))
```

## data.table

```{r}
#| label: tibble-datatable
iris_dt[, lapply(.SD, median), by = Species]
```

:::

::: {.callout-tip}
In the Polars code used above, you will notice thatwe have introduced line breaks after each `$`. We could have written the whole code on the same line but for the sake of readability I prefer to separate the methods used by line breaks.
:::